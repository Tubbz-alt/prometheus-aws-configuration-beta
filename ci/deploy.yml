resource_types:
- name: cf
  type: docker-image
  source:
    repository: concourse/cf-resource
    tag: "1.1"
- name: git
  type: docker-image
  source:
    repository: concourse/git-resource
    tag: "1.6"

resources:
  - name: task-image
    type: docker-image
    icon: layers
    source:
      repository: ((readonly_private_ecr_repo_url))
      tag: prometheus-task-image
  - name: ci-git
    type: git
    source:
      uri: https://github.com/alphagov/prometheus-aws-configuration-beta.git
      branch: master
      paths:
        - ci
  - name: alertmanager-git
    type: git
    source:
      uri: https://github.com/alphagov/prometheus-aws-configuration-beta.git
      branch: master
      paths:
        - terraform/modules/alertmanager
        - terraform/projects/alertmanager-*
  - name: prometheus-git
    type: git
    source:
      uri: https://github.com/alphagov/prometheus-aws-configuration-beta.git
      branch: master
      paths:
        - terraform/modules/prom-ec2
        - terraform/projects/prom-ec2
  - name: cf-app-discovery-git
    type: git
    source:
      uri: https://github.com/alphagov/cf_app_discovery.git
      branch: master
  - name: re-secrets
    type: git
    source:
      private_key: |
        ((re-secrets-ssh-key))
      uri: git@github.com:alphagov/re-secrets.git
      branch: master
      paths:
        - observe
  - name: service-broker-app-staging
    type: cf
    source:
      api: https://api.cloud.service.gov.uk
      username: ((cf_user))
      password: ((cf_password))
      organization: gds-tech-ops
      space: prometheus-staging
  - name: service-broker-app-production
    type: cf
    source:
      api: https://api.cloud.service.gov.uk
      username: ((cf_user))
      password: ((cf_password))
      organization: gds-tech-ops
      space: prometheus-production

jobs:

  - name: configure-pipeline
    serial: true
    plan:
    - get: ci-git
      trigger: true
    - set_pipeline: prometheus
      file: ci-git/ci/deploy.yml
    - put: task-image
      params: {build: ci-git/ci/images/task}
      get_params: {skip_download: true}

  - name: deploy-prometheus-staging
    serial: true
    plan:
      - in_parallel:
        - get: prometheus-git
          trigger: true
        - get: re-secrets
          trigger: true
        - get: ci-git
          passed: [configure-pipeline]
          trigger: true
        - get: task-image
          passed: [configure-pipeline]
          trigger: true
      - task: apply-terraform
        image: task-image
        timeout: 15m
        file: ci-git/ci/tasks/deploy-project.yml
        input_mapping: {src: prometheus-git}
        params:
          PROJECT: prom-ec2/paas-staging
          DEPLOYER_ARN: arn:aws:iam::027317422673:role/autom8-deployer
          GPG_PRIVATE_KEY: ((gpg_private_key))
      - in_parallel:
        - task: smoke-test-prom-1
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://prom-1.monitoring-staging.gds-reliability.engineering/healthz
        - task: smoke-test-prom-2
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://prom-2.monitoring-staging.gds-reliability.engineering/healthz
        - task: smoke-test-prom-3
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://prom-3.monitoring-staging.gds-reliability.engineering/healthz

  - name: deploy-prometheus-production
    serial: true
    plan:
      - in_parallel:
        - get: prometheus-git
          passed: [deploy-prometheus-staging]
          trigger: true
        - get: re-secrets
          passed: [deploy-prometheus-staging]
          trigger: true
        - get: ci-git
          passed: [deploy-prometheus-staging]
          trigger: true
        - get: task-image
          passed: [deploy-prometheus-staging]
          trigger: true
      - task: apply-terraform
        image: task-image
        timeout: 15m
        file: ci-git/ci/tasks/deploy-project.yml
        input_mapping: {src: prometheus-git}
        params:
          PROJECT: prom-ec2/paas-production
          DEPLOYER_ARN: arn:aws:iam::455214962221:role/autom8-deployer
          GPG_PRIVATE_KEY: ((gpg_private_key))
      - in_parallel:
        - task: smoke-test-prom-1
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://prom-1.monitoring.gds-reliability.engineering/healthz
        - task: smoke-test-prom-2
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://prom-2.monitoring.gds-reliability.engineering/healthz
        - task: smoke-test-prom-3
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://prom-3.monitoring.gds-reliability.engineering/healthz

  - name: deploy-alertmanager-staging
    serial: true
    plan:
      - in_parallel:
        - get: alertmanager-git
          trigger: true
        - get: re-secrets
          trigger: true
        - get: ci-git
          passed: [configure-pipeline]
          trigger: true
        - get: task-image
          passed: [configure-pipeline]
          trigger: true
      - task: apply-terraform
        image: task-image
        timeout: 15m
        file: ci-git/ci/tasks/deploy-project.yml
        input_mapping: {src: alertmanager-git}
        params:
          PROJECT: alertmanager-staging
          DEPLOYER_ARN: arn:aws:iam::027317422673:role/autom8-deployer
          GPG_PRIVATE_KEY: ((gpg_private_key))
      - task: wait-for-staging-ecs
        timeout: 15m
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: gdsre/aws-ruby
              tag: 2.6.1-3.0.1
          params:
            DEPLOYMENT: staging
            ACCOUNT_ID: '027317422673'
            AWS_REGION: 'eu-west-1'
            AWS_DEFAULT_REGION: 'eu-west-1'
          run: &run-wait-for-ecs
            path: ruby
            args:
              - -e
              - |
                require 'aws-sdk'

                puts <<~HELP
                  This waits for each ECS service in each cluster to be stable

                  I.e. there are no pending deployments and desired == running

                  It will spend most of its time waiting for the first services
                  This is because it waits for them serially, not in parallel

                  If this task times out then you should go and look in AWS
                HELP

                ACCOUNT_ID = ENV.fetch('ACCOUNT_ID')
                DEPLOYMENT = ENV.fetch('DEPLOYMENT')

                role_arn          = "arn:aws:iam::#{ACCOUNT_ID}:role/autom8-deployer"
                role_session_name = "deploy-concourse-#{Time.new.to_i}"
                duration          = 1800

                puts "Assuming role #{role_arn} for #{duration} with name #{role_session_name}"
                creds = Aws::STS::Client.new.assume_role(
                  role_arn: role_arn,
                  role_session_name: role_session_name,
                  duration_seconds: duration
                )

                puts "Creating ECS client"
                ECS = Aws::ECS::Client.new(credentials: creds)

                cluster_name = "#{DEPLOYMENT}-ecs-monitoring"
                services     = [
                  "#{DEPLOYMENT}-alertmanager-eu-west-1a",
                  "#{DEPLOYMENT}-alertmanager-eu-west-1b",
                  "#{DEPLOYMENT}-alertmanager-eu-west-1c",
                ]

                ECS.wait_until(
                  :services_stable,
                  { cluster: cluster_name, services: services },
                  {
                    max_attempts: nil, # Do timeout in Concourse, not here
                    delay: 15,
                    before_wait: -> (attempt, response) do
                      puts <<~HELP
                        Waiting for stable...
                          Cluster:  #{cluster_name}
                          Services: #{services.join(', ')}
                          Attempt:  #{attempt}
                      HELP
                    end
                  }
                )

                puts "Stable #{cluster_name}"
      - in_parallel:
        - task: smoke-test-alertmanager
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts.monitoring-staging.gds-reliability.engineering/-/healthy
        - task: smoke-test-alertmanager-eu-west-1a
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts-eu-west-1a.monitoring-staging.gds-reliability.engineering/-/healthy
        - task: smoke-test-alertmanager-eu-west-1b
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts-eu-west-1b.monitoring-staging.gds-reliability.engineering/-/healthy
        - task: smoke-test-alertmanager-eu-west-1c
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts-eu-west-1c.monitoring-staging.gds-reliability.engineering/-/healthy

  - name: deploy-alertmanager-production
    serial: true
    plan:
      - in_parallel:
        - get: alertmanager-git
          passed: [deploy-alertmanager-staging]
          trigger: true
        - get: re-secrets
          passed: [deploy-alertmanager-staging]
          trigger: true
        - get: ci-git
          passed: [deploy-alertmanager-staging]
          trigger: true
        - get: task-image
          passed: [deploy-alertmanager-staging]
      - task: apply-terraform
        image: task-image
        timeout: 15m
        file: alertmanager-git/ci/tasks/deploy-project.yml
        input_mapping: {src: alertmanager-git}
        params:
          PROJECT: alertmanager-production
          DEPLOYER_ARN: arn:aws:iam::455214962221:role/autom8-deployer
          GPG_PRIVATE_KEY: ((gpg_private_key))
      - task: wait-for-production-ecs
        timeout: 15m
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: gdsre/aws-ruby
              tag: 2.6.1-3.0.1
          params:
            DEPLOYMENT: staging
            ACCOUNT_ID: '027317422673'
            AWS_REGION: 'eu-west-1'
            AWS_DEFAULT_REGION: 'eu-west-1'
          run: *run-wait-for-ecs
      - in_parallel:
        - task: smoke-test-alertmanager
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts.monitoring.gds-reliability.engineering/-/healthy
        - task: smoke-test-alertmanager-eu-west-1a
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts-eu-west-1a.monitoring.gds-reliability.engineering/-/healthy
        - task: smoke-test-alertmanager-eu-west-1b
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts-eu-west-1b.monitoring.gds-reliability.engineering/-/healthy
        - task: smoke-test-alertmanager-eu-west-1c
          timeout: 2m
          file: ci-git/ci/tasks/http-ping.yml
          params:
            URL: https://alerts-eu-west-1c.monitoring.gds-reliability.engineering/-/healthy

  - name: run-service-broker-tests
    plan:
      - get: cf-app-discovery-git
        trigger: true
      - task: run-tests
        timeout: 15m
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.5.5
          inputs:
            - name: cf-app-discovery-git
              path: repo
          run:
            path: sh
            dir: repo
            args:
            - -c
            - |
              apt-get update
              # Old versions of the ruby docker set this envvar which
              # messes things up it was fixed in
              # docker-library/ruby#255 so we can remove this `unset`
              # line when we upgrade to ruby 2.6
              unset BUNDLER_VERSION
              gem install bundler -v 2.0.1
              bundle install --without development
              bundle exec rake
  - name: deploy-service-broker-staging
    plan:
      - get: cf-app-discovery-git
        trigger: true
        passed: [ run-service-broker-tests ]
      - put: service-broker-app-staging
        params:
          manifest: cf-app-discovery-git/manifest-staging.yml
          show_app_log: true
  - name: deploy-service-broker-production
    plan:
      - get: cf-app-discovery-git
        trigger: true
        passed: [ deploy-service-broker-staging ]
      - put: service-broker-app-production
        params:
          manifest: cf-app-discovery-git/manifest-production.yml
          show_app_log: true
